BEGIN TRANSACTION;

-- USERS
IF OBJECT_ID('Users', 'U') IS NULL
CREATE TABLE Users (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(255) NOT NULL,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    Role NVARCHAR(50) NOT NULL CHECK (Role IN ('artist', 'organizer', 'visitor')),
    Experience NVARCHAR(MAX),
    CreativeInterests NVARCHAR(MAX)
);

-- LOCATIONS
IF OBJECT_ID('Locations', 'U') IS NULL
CREATE TABLE Locations (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(255) NOT NULL,
    Description NVARCHAR(MAX),
    Address NVARCHAR(500),
    Capacity INT,
    Photo VARBINARY(MAX)
);

-- CULTURAL EVENTS
IF OBJECT_ID('CulturalEvents', 'U') IS NULL
CREATE TABLE CulturalEvents (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(255) NOT NULL,
    Description NVARCHAR(MAX),
    StartDateTime DATETIME2 NOT NULL,
    EndDateTime DATETIME2 NOT NULL,
    LocationId INT NOT NULL,
    OrganizerId INT NOT NULL,
    Price INT NOT NULL,
    Status NVARCHAR(50) NOT NULL DEFAULT 'scheduled' CHECK (Status IN ('scheduled', 'cancelled', 'completed')),
    CONSTRAINT FK_CulturalEvents_Locations FOREIGN KEY (LocationId) REFERENCES Locations(Id),
    CONSTRAINT FK_CulturalEvents_Users FOREIGN KEY (OrganizerId) REFERENCES Users(Id)
);

-- ARTIST TO CULTURAL EVENT MAP
IF OBJECT_ID('ArtistToCulturalEventMap', 'U') IS NULL
CREATE TABLE ArtistToCulturalEventMap (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    ArtistId INT NOT NULL,
    CulturalEventId INT NOT NULL,
    CONSTRAINT FK_Artist_CulturalEvent_Artist FOREIGN KEY (ArtistId) REFERENCES Users(Id),
    CONSTRAINT FK_Artist_CulturalEvent_Event FOREIGN KEY (CulturalEventId) REFERENCES CulturalEvents(Id)
);

-- FEEDBACKS
IF OBJECT_ID('Feedbacks', 'U') IS NULL
CREATE TABLE Feedbacks (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    CulturalEventId INT NOT NULL,
    UserId INT NOT NULL,
    Rating INT NOT NULL CHECK (Rating >= 1 AND Rating <= 5),
    Comment NVARCHAR(MAX),
    CONSTRAINT FK_Feedbacks_Event FOREIGN KEY (CulturalEventId) REFERENCES CulturalEvents(Id),
    CONSTRAINT FK_Feedbacks_User FOREIGN KEY (UserId) REFERENCES Users(Id)
);

-- VISITOR TO CULTURAL EVENT MAP
IF OBJECT_ID('VisitorToCulturalEventMap', 'U') IS NULL
CREATE TABLE VisitorToCulturalEventMap (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL,
    CulturalEventId INT NOT NULL,
    RegisteredAt DATETIME2 NOT NULL,
    CONSTRAINT FK_Visitor_Event_User FOREIGN KEY (UserId) REFERENCES Users(Id),
    CONSTRAINT FK_Visitor_Event_Event FOREIGN KEY (CulturalEventId) REFERENCES CulturalEvents(Id)
);

COMMIT;
